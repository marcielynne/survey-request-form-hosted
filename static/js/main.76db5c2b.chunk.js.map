{"version":3,"sources":["Nav.js","AddSymbol.js","Map.js","RowResult.js","Results.js","Search.js","Input.js","Main.js","Projects.js","Time.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","id","react_router_dom","exact","to","src","alt","AddSymbol","this","viewPoint","_this","loadModules","then","_ref","_ref2","Object","slicedToArray","GraphicsLayer","Graphic","Point","PopupTemplate","markerLayer","props","view","on","evt","point","longitude","mapPoint","latitude","pop","title","content","graphic","geometry","symbol","type","size","color","outline","width","popupTemplate","add","projectLonInput","document","getElementById","projectLatInput","value","toString","removeAll","addEventListener","map","catch","err","console","error","React","MakeAMap","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleMapLoad","setState","handleClick","lonClick","latClick","state","react","esm","mapProperties","basemap","viewProperties","center","zoom","onLoad","onClick","AddSymbol_AddSymbol","RowResults","singleRow","vendorImage","projectVendor","vendorSpecies","vendorHouse","vendorAncestry","projectName","projectSRID","projectBillNumType","projectBillNumValue","projectDateReq","projectAssetArea","projectType","projectLat","projectLon","Component","Results","handleChange","row","showValues","_this2","name","summary","searchResults","data","index","key","style","display","clearValues","RowResult","Search","_evt$target","target","defineProperty","compareObjects","o1","o2","k","itemExists","arr","obj","i","length","updateSearchResults","prevState","concat","toConsumableArray","surveyRequests","searchValues","_this$setState2","_evt$target2","searchValueUpper","searchValue","toUpperCase","indexOf","displayValues","alert","htmlFor","onChange","src_Results","Input","fetchData","url","fetch","checkStatus","res","json","log","response","ok","Promise","resolve","reject","Error","statusText","onSelect","_this$setState","selectedIndex","options","getAttribute","handleChangeLatLon","preventDefault","inputLon","current","focus","inputLat","handleAddNew","e","z","parts","split","day","parseInt","month","year","test","newobj","vendorName","myFunction","createRef","assetAreas","vendorNames","projectTypes","billNumTypes","all","image","data-key","vendor-name","species","house","ancestry","billNumType","brewery_type","onFocus","placeholder","ref","readOnly","src_Search","Main","Map_MakeAMap","src_Input","Projects","Time","App","newObject","src_Nav","react_router","path","render","src_Main","assign","src_Projects","component","Boolean","window","location","hostname","match","ReactDOM","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76db5c2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// Navigation component. This incorporates Links used in React Router. \r\nconst Nav = () => (\r\n    <div className=\"main-nav\">\r\n        <ul className=\"nav\">\r\n            <li className=\"item\" id=\"item-1\"><NavLink exact to=\"/\">Main</NavLink></li>\r\n            <li className=\"item\" id=\"item-2\"><NavLink to=\"/projects\">Projects</NavLink></li>\r\n            <li className=\"logo\"><img src=\"img/3d-logo.png\" alt=\"Company Logo\" id=\"image\" /></li>\r\n            <li className=\"item\" id=\"item-3\"><NavLink to=\"/search\">Search</NavLink></li>\r\n            <li className=\"item\" id=\"item-4\"><NavLink to=\"/time\">Time</NavLink></li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Nav;\r\n\r\n","// Component for adding a symol to the map each time a user clicks on the map. Uses modules from @esri/react-arcgis.\r\nimport * as React from 'react';\r\nimport { loadModules } from '@esri/react-arcgis';\r\n\r\nexport default class AddSymbol extends React.Component {\r\n    \r\n    render() {        \r\n        return null;\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.viewPoint();\r\n    }\r\n\r\n    viewPoint() {\r\n        // Load GraphicsLayer, Graphic, Point, and PopupTemplate modules\r\n        loadModules([\r\n            \"esri/layers/GraphicsLayer\",\r\n            \"esri/Graphic\",\r\n            \"esri/geometry/Point\",\r\n            \"esri/PopupTemplate\"\r\n          ]).then(([GraphicsLayer, Graphic, Point, PopupTemplate]) => {\r\n      \r\n            const markerLayer = new GraphicsLayer();\r\n\r\n            // Store latitude and longitude based on user click\r\n            this.props.view.on('click', function (evt) {\r\n                const point = new Point({\r\n                    longitude: evt.mapPoint.longitude,\r\n                    latitude: evt.mapPoint.latitude\r\n                });\r\n        \r\n                // Create marker to use when user clicks on map\r\n                const markerSymbol = {\r\n                    type: \"simple-marker\",\r\n                    size: 10,\r\n                    color: [128, 0, 0, 0.9],\r\n                    outline: {\r\n                    color: [255, 0, 0, 1],\r\n                    width: 1\r\n                    }\r\n                };\r\n        \r\n                // Display latitude and longitude when user clicks on point\r\n                const pop = new PopupTemplate({\r\n                    title: '<b>Location</b>',\r\n                    content: 'X Lon: ' + evt.mapPoint.longitude +\r\n                        '<br>Y Lat: ' + evt.mapPoint.latitude\r\n                });\r\n        \r\n                // Call the previously created constants for the graphic\r\n                const graphic = new Graphic({\r\n                    geometry: point,\r\n                    symbol: markerSymbol,\r\n                    popupTemplate: pop\r\n                });\r\n\r\n                markerLayer.add(graphic);\r\n\r\n                // Display lat and lon in the input fields based on where the user clicks on the map\r\n                const projectLonInput = document.getElementById(\"projectLon\");\r\n                const projectLatInput = document.getElementById(\"projectLat\");\r\n                projectLonInput.value = evt.mapPoint.longitude.toString();\r\n                projectLatInput.value = evt.mapPoint.latitude.toString();\r\n\r\n            });\r\n\r\n            // Remove previously added markers for each user click on map\r\n            this.props.view.on('click', function() {\r\n                markerLayer.removeAll();\r\n            }) \r\n\r\n            // Remove the graphic when the project is submitted \r\n            document.getElementById(\"btnSubmit\").addEventListener('click', function() {\r\n                markerLayer.removeAll();\r\n            })\r\n\r\n            this.props.map.add(markerLayer);\r\n\r\n          }).catch((err) => console.error(err));\r\n    }\r\n}","import * as React from 'react';\r\nimport { Map } from '@esri/react-arcgis';\r\nimport AddSymbol from './AddSymbol'; \r\n\r\n// Map component that utilizes @esri/react-arcgis. map, view, lonClick, and latClick are being stored in state, but are not being used anywhere else. Future development will use these in the AddSymbol component.\r\nexport default class MakeAMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Set the state for map, view, lonClick, and latClick\r\n        this.state = {\r\n            map: null,\r\n            view: null,\r\n            lonClick: '',\r\n            latClick: ''\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Set the properties of the map to be hybrid, centered, and zoomed at 4.\r\n            <Map\r\n            mapProperties={{basemap: 'hybrid'}} \r\n            viewProperties={{center: [-95, 40], zoom: 4}}\r\n            onLoad={this.handleMapLoad}\r\n            onClick={this.handleClick}>\r\n                {/* While lonClick and latClick are being passed to AddSymbol, they are not being used in AddSymbol. This will be future development. */}\r\n                <AddSymbol \r\n                    lonClick={this.state.lonClick}\r\n                    latClick={this.state.latClick}\r\n                />\r\n            </Map> \r\n        );    \r\n    }\r\n\r\n    // Set the state of map and view on load\r\n    handleMapLoad = (map, view) => {\r\n        this.setState({ map, view });\r\n    }\r\n\r\n    // Set the state of lonClick and latClick to be the evt.mapPoints based on where a user clicks.\r\n    handleClick = (evt) => {\r\n        this.setState({\r\n            lonClick: evt.mapPoint.longitude,\r\n            latClick: evt.mapPoint.latitude\r\n        })\r\n    }\r\n    \r\n}\r\n","import React, {Component} from 'react';\r\n\r\n// Component to display values based on which row a user clicks\r\nclass RowResults extends Component {\r\n    render() {\r\n        return (\r\n            // Values are populated from the singleRow object created in the Results component.\r\n            <div>\r\n                <img src={this.props.singleRow.vendorImage} alt=\"vendor\" id=\"vendorImage\"></img><br/><br />\r\n                <label id=\"resultsTitle\">Vendor Information</label>\r\n                <ul>\r\n                    <li>Vendor: {this.props.singleRow.projectVendor}</li>\r\n                    <li>Species: {this.props.singleRow.vendorSpecies}</li>\r\n                    <li>Home: {this.props.singleRow.vendorHouse}</li>\r\n                    <li>Ancestry: {this.props.singleRow.vendorAncestry}</li>                 \r\n                </ul>\r\n                <label id=\"resultsTitle\">Project Information</label>\r\n                <ul>\r\n                    <li>Project Name: {this.props.singleRow.projectName}</li>\r\n                    <li>SRID: {this.props.singleRow.projectSRID}</li>\r\n                    <li>Bill Num Type: {this.props.singleRow.projectBillNumType}</li>\r\n                    <li>Bill Num Value: {this.props.singleRow.projectBillNumValue}</li>\r\n                    <li>Date Requested: {this.props.singleRow.projectDateReq}</li>\r\n                    <li>Asset Area: {this.props.singleRow.projectAssetArea}</li>\r\n                    <li>Project Type: {this.props.singleRow.projectType}</li>\r\n                    <li>Latitude: {this.props.singleRow.projectLat}</li>\r\n                    <li>Longitude: {this.props.singleRow.projectLon}</li>                    \r\n                </ul>\r\n            </div>  \r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default RowResults;","import React, { Component } from 'react';\r\nimport RowResult from './RowResult';\r\n\r\n// Results component shows the values from searchResults that was created in the Search component\r\nclass Results extends Component {    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showValues: false,\r\n            singleRow: []\r\n        };\r\n    }\r\n\r\n    // Set the state of singleRow and showValues when a table row is clicked\r\n    handleChange = (row) => {\r\n        this.setState({\r\n            singleRow: row,\r\n            showValues: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {/* Table that is only displayed if a record exists to display the search results */}\r\n            <table id=\"resultsTable\" name=\"resultsTable\" summary=\"Table of search results.\" >\r\n                <thead id=\"thead\"></thead>\r\n                <tbody id=\"tbody\">                 \r\n                    <tr>\r\n                        <th>Project Name</th>\r\n                        <th>SRID</th>\r\n                        <th>Billing Number</th>\r\n                    </tr>\r\n                    \r\n                    {/* Map over and display the results from searchResults object created in the Search component */}\r\n                    {this.props.searchResults.map((data,index) => \r\n                    <tr key={index.toString()} value={index} onClick={() => this.handleChange(data)}>\r\n                        <td>{data.projectName}</td>\r\n                        <td>{data.projectSRID}</td>\r\n                        <td>{data.projectBillNumType}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectBillNumValue}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectVendor}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectDateReq}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectAssetArea}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectType}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectLon}</td>\r\n                        <td style={{display: \"none\"}}>{data.projectLat}</td>\r\n                        <td style={{display: \"none\"}}>{data.vendorImage}</td>\r\n                        </tr>\r\n                    )}\r\n\r\n                </tbody>\r\n            </table><br />\r\n\r\n            {/* Clear button */}\r\n            <button className=\"button\" id=\"btnClear\" type=\"button\" onClick={this.props.clearValues}>\r\n                Clear\r\n            </button><br /><br />\r\n\r\n            {/* If there are values to display, show the RowResult component */}\r\n            {\r\n                this.state.showValues ? \r\n                    // Pass singleRow to RowResult component\r\n                    <RowResult \r\n                        singleRow={this.state.singleRow}\r\n                    >     \r\n                    </RowResult> : null\r\n            }\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport Results from './Results';\r\n\r\n// Search component used to retrieve values from the surveyRequests object. Results are stored in the searchResults object created below. \r\nclass Search extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchValue: '',\r\n            searchResults: [],\r\n            showValues: false\r\n        };\r\n    }\r\n\r\n    // Set the state of input values on change event\r\n    handleChange = (evt) => {\r\n        let {name, value} = evt.target;\r\n        this.setState({ [name]: value });\r\n    } \r\n\r\n    // The compareObjects function compares values added to an object. If a record does not exactly match another record, return false. Ultimately, records that match exactly will not be shown in the results table.\r\n    compareObjects = (o1, o2) => {\r\n        var k = '';\r\n        for(k in o1) if(o1[k] !== o2[k]) return false;\r\n        for(k in o2) if(o1[k] !== o2[k]) return false;\r\n        return true;\r\n    }\r\n\r\n    // Used with the compareObjects function above, the itemExists function searchs an object to see if a value exists. \r\n    itemExists = (arr, obj) => {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (this.compareObjects(arr[i], obj)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Add values to the searchResults object based on search items found in surveyRequests object\r\n    updateSearchResults = (i) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                searchResults: [\r\n                    ...prevState.searchResults, this.props.surveyRequests[i]\r\n                ]\r\n            }\r\n        })\r\n    }\r\n\r\n    // searchValue function incorporates functions listed above to retrieve results; called on change event of search input textbox\r\n    searchValues = (evt) => {\r\n        let {name, value} = evt.target;\r\n        this.setState({ \r\n            [name]: value,\r\n            searchResults: [] \r\n        }); \r\n        var searchValueUpper = this.state.searchValue.toUpperCase();\r\n\r\n        if (searchValueUpper.length !== 0) {\r\n            for(var i=0; i < this.props.surveyRequests.length; i++) {\r\n                for(var key in this.props.surveyRequests[i]) {\r\n                    if(this.props.surveyRequests[i][key].indexOf(searchValueUpper) !== -1) {\r\n                        if(!this.itemExists(this.state.searchResults, this.props.surveyRequests[i])) {\r\n                            this.updateSearchResults(i)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Called on the click event of the search button. If values are found, display the Results component\r\n    displayValues = () => {\r\n        if (this.state.searchResults.length > 0) {\r\n            this.setState({\r\n                showValues: true\r\n            })\r\n        } else {\r\n            var addMessage = \"No results found\";\r\n            alert(addMessage);\r\n            this.setState({searchValue: ''})\r\n        }\r\n    }\r\n\r\n    // clearValues function resets the state of of the input values to be blank\r\n    clearValues = () => {\r\n        this.setState ({\r\n            projectName: '',\r\n            projectSRID: '',\r\n            projectBillNumType: '',\r\n            projectBillNumValue: '',\r\n            projectVendor: '',\r\n            projectDateReq: '',\r\n            projectAssetArea: '',\r\n            projectType: '',\r\n            projectLon: '',\r\n            projectLat: '',\r\n            searchValue: '',\r\n            vendorImage: '', \r\n            searchResults: [],\r\n            showValues: false\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"search-display-flex\">\r\n            <h2 id=\"existingRequests\">Search Existing Requests</h2>\r\n\r\n            {/* Search Value textbox */}\r\n            <label htmlFor=\"searchValue\">Value:</label><br />\r\n            <input type=\"text\" id=\"searchValue\" name=\"searchValue\" value={this.state.searchValue} onChange={this.searchValues}/><br />\r\n\r\n            {/* Search button */}\r\n            <button className=\"button\" id=\"btnSearch\" type=\"button\" onClick={this.displayValues}>\r\n                Search\r\n            </button>\r\n            {/* Display the Results component if values are found in the search */}\r\n            {\r\n                this.state.showValues ? \r\n                        // Pass searchResults and clearValues to the Results component\r\n                        <Results \r\n                            searchResults={this.state.searchResults}\r\n                            clearValues={this.clearValues}\r\n                        >     \r\n                        </Results> : null\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, {Component} from 'react';\r\nimport Search from './Search';\r\n\r\nclass Input extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        // React.createRef used for the Lat and Lon values since those are being populated via the AddSymbol component\r\n        this.inputLat = React.createRef();\r\n        this.inputLon = React.createRef();\r\n        // Set the state for all of the inputs as well as the values pulled from the APIs\r\n        this.state = {\r\n            projectName: '',\r\n            projectSRID: '',\r\n            projectBillNumType: '',\r\n            projectBillNumValue: '',\r\n            projectVendor: '',\r\n            projectDateReq: '',\r\n            projectAssetArea: '',\r\n            projectType: '',\r\n            projectLon: '',\r\n            projectLat: '',\r\n            assetAreas: [],\r\n            vendorNames: [],\r\n            projectTypes: [],\r\n            billNumTypes: [],\r\n            vendorImage:'',\r\n            vendorName:'',\r\n            vendorSpecies: '',\r\n            vendorHouse: '',\r\n            vendorAncestry: ''\r\n        };\r\n    }\r\n\r\n    // Function to check the status and json repsonse of the APIs\r\n    fetchData = (url) => {\r\n        return fetch(url)\r\n                 .then(this.checkStatus)  \r\n                 .then(res => res.json())\r\n                 .catch(error => console.log('Looks like there was a problem!', error))\r\n    }\r\n\r\n    // Function to check that the API URL is functioning properly; used in the fetchData function\r\n    checkStatus = (response) => {\r\n        if (response.ok) {\r\n          return Promise.resolve(response);\r\n        } else {\r\n          return Promise.reject(new Error(response.statusText));\r\n        }\r\n      }\r\n\r\n    // Call four APIs to be used in the dropdown inputs on the Main component   \r\n    componentDidMount() {      \r\n        Promise.all([\r\n            // this.fetchData('https://swapi.co/api/planets/'),\r\n            this.fetchData('https://hp-api.herokuapp.com/api/characters'),\r\n            // this.fetchData('https://swapi.co/api/people/'),\r\n            this.fetchData('https://api.openbrewerydb.org/breweries')\r\n        ])\r\n        .then(data => {\r\n            // // Uses the https://swapi.co/api/planets API to populate the assetAreas dropdown input\r\n            // const assetAreas = data[0].results.map((assetArea) => {\r\n            //     return(\r\n            //         <option key={assetArea.url}>{assetArea.name}</option>\r\n            //     )\r\n            // });\r\n            // Uses the https://hp-api.herokuapp.com/api/characters API to populate the vendorName dropwdown input. Also stores other vendor information from the API which is pushed to the array and displayed in the search results. \r\n            const vendorNames = data[1].map((vendorName) => {\r\n                return(\r\n                    <option \r\n                        key={vendorName.image} \r\n                        data-key={vendorName.image}\r\n                        vendor-name={vendorName.name}\r\n                        species={vendorName.species}\r\n                        house={vendorName.house}\r\n                        ancestry={vendorName.ancestry}\r\n                        onClick={this.onSelect}>{vendorName.name}</option>\r\n                )\r\n            });\r\n            // // Uses the https://swapi.co/api/people API to populate the projectTypes dropdown input\r\n            // const projectTypes = data[2].results.map((projectType) => {\r\n            //     return(\r\n            //         <option key={projectType.url}>{projectType.name}</option>\r\n            //     )\r\n            // });\r\n            // Uses the https://api.openbrewerydb.org/breweries API to populate the billNumType dropdown input\r\n            const billNumTypes = data[3].map((billNumType) => {\r\n                return(\r\n                    <option key={billNumType.brewery_type}>{billNumType.name}</option>\r\n                )\r\n            });\r\n            // Set the state for the objects listed below\r\n            this.setState({\r\n                // assetAreas: assetAreas,\r\n                vendorNames: vendorNames,\r\n                // projectTypes: projectTypes,\r\n                billNumTypes: billNumTypes\r\n            })\r\n        })\r\n    }\r\n \r\n    // When a vendor value is selected, retrieve the values from the https://hp-api.herokuapp.com/api/characters API to populate the additional values to be returned during the search\r\n    onSelect = (evt) => {\r\n        const selectedIndex = evt.target.options.selectedIndex;\r\n        let {name, value} = evt.target;\r\n        this.setState({ \r\n            [name]: value, \r\n            vendorImage: (evt.target.options[selectedIndex].getAttribute('data-key')),\r\n            vendorName: (evt.target.options[selectedIndex].getAttribute('vendor-name')),\r\n            vendorSpecies: (evt.target.options[selectedIndex].getAttribute('species')),\r\n            vendorHouse: (evt.target.options[selectedIndex].getAttribute('house')),\r\n            vendorAncestry: (evt.target.options[selectedIndex].getAttribute('ancestry'))\r\n        });\r\n    }\r\n\r\n    // Function to set the state when an input value changes\r\n    handleChange = (evt) => {\r\n        let {name, value} = evt.target;\r\n        this.setState({ [name]: value });\r\n    }  \r\n\r\n    // Function to set the state of lat and lon input fields; user is prompted to select a point on the map since this function is trigered when the projectName input receives focus\r\n    handleChangeLatLon = (evt) => {\r\n        evt.preventDefault();\r\n        if (this.inputLon.current.value === '') {\r\n            alert('Please choose a point on the map first.');\r\n            this.inputLon.current.focus();\r\n        } else {\r\n            this.setState({\r\n                projectLon: this.inputLon.current.value,\r\n                projectLat: this.inputLat.current.value\r\n            })\r\n        }   \r\n    }\r\n\r\n    // When the user clicks the submit button...\r\n    handleAddNew = (e) => {\r\n        // Variables for date validation\r\n        var z = this.state.projectDateReq;\r\n        var parts = z.split(\"/\");\r\n        var day = parseInt(parts[1], 10);\r\n        var month = parseInt(parts[0], 10);\r\n        var year = parseInt(parts[2], 10);\r\n        \r\n        // Check that the input fields for project name, SRID, bill number type, bill number value, vendor, date requested, asset area, project type, lat, and lon are not null before pushing to the surveyRequests object.\r\n        if (\r\n            this.state.projectName === '' ||\r\n            this.state.projectSRID === '' ||\r\n            this.state.projectBillNumType === '' ||\r\n            this.state.projectBillNumValue === '' ||\r\n            this.state.projectVendor === '' ||\r\n            this.state.projectDateReq === '' ||\r\n            this.state.projectAssetArea === '' ||\r\n            this.state.projectType === '' ||\r\n            this.state.projectLon === '' ||\r\n            this.state.projectLat === '' \r\n        ) {\r\n            alert(\"Oops, looks like you missed some fields.\")\r\n        } else if (!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(z) || (year < 1900 || year > 2100 || month === 0 || month > 12 || day <= 0 || day > 31)) {\r\n            alert(\"Date is not in the correct format or the value is wrong.\")\r\n        } else {\r\n            e.preventDefault();           \r\n            // Set newobj to the states of the input values listed below. This is for the handleAddNew function that was created in the App component, which adds the values to a previously created object.\r\n            let newobj = {\r\n                projectName: this.state.projectName.toUpperCase(),\r\n                projectSRID: this.state.projectSRID,\r\n                projectBillNumType: this.state.projectBillNumType.toUpperCase(),\r\n                projectBillNumValue: this.state.projectBillNumValue,\r\n                projectVendor: this.state.projectVendor.toUpperCase(),\r\n                projectDateReq: this.state.projectDateReq,\r\n                projectAssetArea: this.state.projectAssetArea.toUpperCase(),\r\n                projectType: this.state.projectType.toUpperCase(),\r\n                projectLon: this.state.projectLon,\r\n                projectLat: this.state.projectLat,\r\n                vendorImage: this.state.vendorImage,\r\n                vendorName: this.state.vendorName.toUpperCase(),\r\n                vendorSpecies: this.state.vendorSpecies.toUpperCase(),\r\n                vendorHouse: this.state.vendorHouse.toUpperCase(),\r\n                vendorAncestry: this.state.vendorAncestry.toUpperCase()\r\n            }\r\n            this.props.myFunction(newobj)\r\n                    \r\n            // Once the record has been added, set the state of the input values back to blank\r\n            var addMessage = \"Yay! You added a thing!\";\r\n            alert(addMessage);\r\n            this.inputLon.current.value = '';\r\n            this.inputLat.current.value = '';\r\n            this.setState({\r\n                projectName: '', \r\n                projectSRID: '',\r\n                projectBillNumType: '',\r\n                projectBillNumValue: '',\r\n                projectVendor: '',\r\n                projectDateReq: '',\r\n                projectAssetArea: '',\r\n                projectType: '',\r\n                projectLon: '',\r\n                projectLat: '',\r\n                vendorImage: '',\r\n                vendorName: '',\r\n                vendorSpecies: '',\r\n                vendorHouse: '',\r\n                vendorAncestry: ''\r\n            })\r\n            }\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"fieldset\" name=\"inputForm\">\r\n                <div className=\"form-flex\">\r\n                <h2 id=\"newRequests\">Enter New Survey Request</h2>\r\n                \r\n                {/* Project Name textbox */}\r\n                <label htmlFor=\"projectName\">Project Name:</label><br />\r\n                <input type=\"text\" id=\"projectName\" name=\"projectName\" onChange={this.handleChange} value={this.state.projectName} onFocus={this.handleChangeLatLon}/><br />\r\n\r\n                {/* Project SRID textbox */}\r\n                <label htmlFor=\"projectSRID\">SRID:</label><br />\r\n                <input type=\"text\" id=\"projectSRID\" name=\"projectSRID\" onChange={this.handleChange} value={this.state.projectSRID}/><br />\r\n\r\n                {/* Project Bill Num Type listbox */}\r\n                <label htmlFor=\"projectBillNumType\">Bill Number Type:</label><br />\r\n                <select id=\"projectBillNumType\" name=\"projectBillNumType\" onChange={this.handleChange} value={this.state.projectBillNumType}>\r\n                    <option style={{display:\"none\"}}></option>\r\n                    {this.state.billNumTypes}\r\n                </select><br />\r\n\r\n\r\n                {/* Project Bill Num Value textbox */}\r\n                <label htmlFor=\"projectBillNumValue\">Bill Number Value:</label><br />\r\n                <input type=\"text\" id=\"projectBillNumValue\" name=\"projectBillNumValue\" onChange={this.handleChange} value={this.state.projectBillNumValue} /><br />\r\n\r\n                {/* Project Vendor listbox */}\r\n                <label htmlFor=\"projectVendor\">Vendor:</label><br />\r\n                <select id=\"projectVendor\" name=\"projectVendor\" onChange={this.onSelect} value={this.state.projectVendor}>\r\n                    <option style={{display:\"none\"}}></option>\r\n                    {this.state.vendorNames}\r\n\r\n                </select><br />\r\n\r\n                {/* Project Date Req textbox for dates */}\r\n                <label htmlFor=\"projectDateReq\">Date Requested:</label><br />\r\n                <input type=\"text\" id=\"projectDateReq\" name=\"projectDateReq\" placeholder=\"DD/MM/YYYY\" onChange={this.handleChange} value={this.state.projectDateReq} /><br />\r\n\r\n                {/* Project Asset Area listbox */}\r\n                <label htmlFor=\"projectAssetArea\">Asset Area:</label><br />\r\n                <select id=\"projectAssetArea\" name=\"projectAssetArea\" onChange={this.handleChange} value={this.state.projectAssetArea}>\r\n                    <option style={{display:\"none\"}}></option>\r\n                    {this.state.vendorNames}\r\n                </select><br />\r\n\r\n                {/* Project Type listbox */}\r\n                <label htmlFor=\"projectType\">Project Type:</label><br />\r\n                <select id=\"projectType\" name=\"projectType\" onChange={this.handleChange} value={this.state.projectType}>\r\n                    <option style={{display:\"none\"}}></option>\r\n                    {this.state.vendorNames}\r\n\r\n                </select><br />\r\n\r\n                {/* Project Longitude textbox - readonly */}\r\n                <label htmlFor=\"projectLon\">X Longitude:</label><br />\r\n                <input type=\"text\" id=\"projectLon\" name=\"projectLon\" ref={this.inputLon} readOnly/><br />\r\n\r\n                {/* Project Latitude textbox - readonly */}\r\n                <label htmlFor=\"projectLat\">Y Latitude:</label><br />\r\n                <input type=\"text\" id=\"projectLat\" name=\"projectLat\" ref={this.inputLat} readOnly/><br />\r\n\r\n                {/* Submit button */}\r\n                <button className=\"button\" id=\"btnSubmit\" type=\"button\" onClick={this.handleAddNew}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n\r\n                {/* Pass surveyRequests to the Search component */}\r\n                <Search\r\n                    surveyRequests={this.props.surveyRequests}\r\n                />\r\n\r\n            </form>    \r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport Map from './Map';\r\nimport Input from './Input';\r\n\r\n// Main component used for displaying the Input component which includes the map function.\r\nclass Main extends Component {  \r\n    render () {\r\n        return (\r\n                <div>               \r\n                    <div className=\"overall-flex\">\r\n                        <div id=\"mapDiv\">\r\n                            <Map />\r\n                            <p className=\"mapText\" alt=\"Form Map\">Click on the map to add a point.</p>\r\n                        </div>\r\n                        <div>\r\n                            {/* Pass surveyRequests and myFunction to the Input component */}\r\n                            <Input \r\n                                surveyRequests={this.props.surveyRequests} \r\n                                myFunction={this.props.myFunction}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\n\r\n// The Projects component lists all projects that are currently stored.\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"resultsList\">\r\n                {/* Map over the surveyRequests object to display the data */}\r\n                {this.props.surveyRequests.map((data, index) =>\r\n                    <div key={index}>\r\n                    <label id=\"resultsTitle\">Project information for: <i>{data.projectName}</i> </label><br />\r\n                    {/* Display the vendor image stored in the object, which was pulled from the Harry Potter API */}\r\n                    <img src={data.vendorImage} alt=\"vendor\" id=\"vendorImage\"></img>\r\n                    {/* Map over and display all values from the surveyRequests object */}\r\n                    <ul>\r\n                        <li>Vendor: {data.projectVendor}</li>\r\n                        <li>Species: {data.vendorSpecies}</li>\r\n                        <li>House: {data.vendorHouse}</li>\r\n                        <li>Ancestry: {data.vendorAncestry}</li>\r\n                        <li>Project Name: {data.projectName}</li>\r\n                        <li>SRID: {data.projectSRID}</li>\r\n                        <li>Bill Num Type: {data.projectBillNumType}</li>\r\n                        <li>Bill Num Value: {data.projectBillNumValue}</li>\r\n                        <li>Date Requested: {data.projectDateReq}</li>\r\n                        <li>Asset Area: {data.projectAssetArea}</li>\r\n                        <li>Project Type: {data.projectType}</li>\r\n                        <li>Latitude: {data.projectLat}</li>\r\n                        <li>Longitude: {data.projectLon}</li>\r\n                    </ul><br />\r\n                    </div>\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from 'react';\r\n\r\n// Time component. At the moment, this does not do anything other than call a random picture of Nick Cage.\r\nclass Time extends Component {\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>This will be where the time magic happens.\r\n                <div>\r\n                    <img src=\"https://www.placecage.com/200/300\" alt=\"nick cage\"/>\r\n                </div>\r\n            </h1>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;\r\n","import React, { Component } from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Nav from './Nav';\r\nimport Main from './Main';\r\nimport Projects from './Projects';\r\nimport Time from './Time';\r\nimport Search from './Search';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Create object to store project values. This will be accessed by the Main component.\r\n      surveyRequests:[{\r\n        projectAssetArea: \"YAVIN IV\",\r\n        projectBillNumType: \"TRIM TAB BREWING\",\r\n        projectBillNumValue: \"191\",\r\n        projectDateReq: \"12/12/2019\",\r\n        projectLat: \"42.05515118647973\",\r\n        projectLon: \"-94.73632812499847\",\r\n        projectName: \"TEST\",\r\n        projectSRID: \"1234\",\r\n        projectType: \"LUKE SKYWALKER\",\r\n        projectVendor: \"DRACO MALFOY\",\r\n        vendorAncestry: \"PURE-BLOOD\",\r\n        vendorHouse: \"SLYTHERIN\",\r\n        vendorImage: \"http://hp-api.herokuapp.com/images/draco.jpg\",\r\n        vendorName: \"DRACO MALFOY\",\r\n        vendorSpecies: \"HUMAN\"\r\n      }]\r\n    };\r\n  }\r\n\r\n  // Create function to pass to Main component to be used to add values to the previously created object.\r\n  handleAddNew = (newObject) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        surveyRequests: [\r\n          ...prevState.surveyRequests,\r\n          newObject\r\n        ]\r\n      }\r\n    }, () => console.log(this.state.surveyRequests))\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      // Utilize HashRouter to create Routes to Main, Project, Time, and Search components\r\n      <HashRouter>\r\n        <div>\r\n          <Nav />\r\n          {/* Pass arrayResults and myFunction to Main component */}\r\n          <Route exact path=\"/\" \r\n            render={(props) => <Main {...props} surveyRequests={this.state.surveyRequests} myFunction={this.handleAddNew} />}\r\n          />\r\n          {/* Pass arrayResults to Projects component */}\r\n          <Route path=\"/projects\" \r\n            render={(props) => <Projects {...props} surveyRequests={this.state.surveyRequests} />} \r\n          />\r\n          <Route path=\"/time\" component={Time} />\r\n          {/* Pass surveyRequests to Search component */}\r\n          <Route path=\"/search\" \r\n            render={(props) => <Search {...props} surveyRequests={this.state.surveyRequests} />} \r\n          />\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// Code to render App component\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}